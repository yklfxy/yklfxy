package com.company;

import java.time.Instant;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalAdjusters;
import java.util.Scanner;
import java.util.function.BiConsumer;

import static java.time.temporal.ChronoUnit.DAYS;
import static java.time.temporal.ChronoUnit.SECONDS;

/**
 *
 */
public class DateSplit {
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    static TemporalAdjuster oneday = TemporalAdjusters.ofDateAdjuster(date -> date.plusDays(1));
    LocalDate start = LocalDate.now();
    LocalDate end = LocalDate.now();
    int interval = 15;
    TemporalAdjuster dateSplit = TemporalAdjusters.ofDateAdjuster(date -> date.plusDays(15));
    int agv = 3;
    int spend = -1;
    boolean mode = false;

    public DateSplit(String start, String end, int interval) {
        this.start = LocalDate.parse(start, dtf);
        this.end = LocalDate.parse(end, dtf);
        this.interval = interval;
    }

    public DateSplit(String start, String end, int interval, boolean mode) {
        this.start = LocalDate.parse(start, dtf);
        this.end = LocalDate.parse(end, dtf);
        this.interval = interval;
        this.mode = mode;
    }

    public DateSplit() {
        super();
    }

    public Integer split(BiConsumer<String, String> action) {
        Instant init = Instant.now();
        long days = DAYS.between(start, end);
        if (days <= interval) {
            action.accept(start.format(dtf), end.format(dtf));
        } else {
            LocalDate from = start;
            LocalDate to = start;
            while (to.isBefore(end)) {
//                if (mode && spend>-1) {
//                    int bb = interval + (agv - spend);
//                    agv = (agv + spend) / 2;
//                    dateSplit = TemporalAdjusters.ofDateAdjuster(date -> date.plusDays(bb));
//                    interval = bb;
//                }
                to = from.with(dateSplit);
                if (to.isAfter(end)) {
                    to = end;
                }
                Instant s = Instant.now();
                action.accept(from.format(dtf), to.format(dtf));
                Instant e = Instant.now();
                spend = (int) SECONDS.between(s, e);

                System.out.printf("RANGE[%s~%s],CURENT:[%s~%S],TIME:%ds,INTERVAL:%d\n", start, end, from, to, spend, interval);


                from = to.with(oneday);

            }
        }
        Instant end = Instant.now();
        return (int) SECONDS.between(init, end);

    }

    public static void main(String[] args) {
        LocalDate.parse("2022-01-01");
//        LocalDate.parse("2022/01/01");
//        LocalDate.parse("2022年01月01日");

        DateSplit ds = new DateSplit("2022-01-01", "2023-05-05", 15);
        Scanner s = new Scanner(System.in);
        ds.split((from, to) -> {

            String line = s.nextLine();

        });

    }
}
